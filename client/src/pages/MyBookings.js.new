import React, { useState, useEffect } from 'react';
import { Link, useNavigate, useLocation } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import { motion } from 'framer-motion';
import { getUserBookings, getProviderBookings, updateBookingStatus, deleteBooking } from '../services/bookingService';
import { getServiceById } from '../services/serviceService';
import { format } from 'date-fns';
import { 
  FaCalendarAlt, 
  FaClock, 
  FaMapMarkerAlt, 
  FaUserAlt, 
  FaCheckCircle, 
  FaTimesCircle, 
  FaEye, 
  FaEdit, 
  FaBan, 
  FaCheck, 
  FaTimes, 
  FaTrash,
  FaExclamationTriangle,
  FaInbox
} from 'react-icons/fa';

const MyBookings = () => {
  const { currentUser, userRole, loading: authLoading } = useAuth();
  const navigate = useNavigate();
  const location = useLocation();
  const [bookings, setBookings] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(null);
  const [activeTab, setActiveTab] = useState('upcoming');
  const [cancelBookingId, setCancelBookingId] = useState(null);
  const [showCancelModal, setShowCancelModal] = useState(false);
  const [showDetailsModal, setShowDetailsModal] = useState(false);
  const [selectedBooking, setSelectedBooking] = useState(null);
  const [processingAction, setProcessingAction] = useState(false);
  const [serviceDetails, setServiceDetails] = useState({});
  
  // Default placeholder images
  const defaultServiceImage = 'https://via.placeholder.com/300x200?text=Service+Image';
  const defaultAvatarImage = 'https://via.placeholder.com/64x64?text=User';
  
  // Check for success message from sessionStorage
  useEffect(() => {
    if (sessionStorage.getItem('bookingSuccess') === 'true') {
      const message = sessionStorage.getItem('bookingMessage') || 'Booking was successful!';
      setSuccess(message);
      setActiveTab('upcoming');
      
      // Clear sessionStorage
      sessionStorage.removeItem('bookingSuccess');
      sessionStorage.removeItem('bookingMessage');
      
      // Auto-hide success message after 5 seconds
      const timer = setTimeout(() => {
        setSuccess(null);
      }, 5000);
      
      return () => clearTimeout(timer);
    }
  }, [location]);
  
  // Handle role-based access
  useEffect(() => {
    if (!authLoading) {
      if (!currentUser) {
        navigate('/login', { state: { from: '/my-bookings' } });
        return;
      }
      
      fetchBookings();
    }
  }, [currentUser, authLoading, userRole]);
  
  // Fetch bookings from API
  const fetchBookings = async () => {
    try {
      setLoading(true);
      setError(null);
      
      if (!currentUser) {
        setLoading(false);
        return;
      }
      
      let response;
      
      // Get bookings based on user role
      if (userRole === 'provider') {
        response = await getProviderBookings(currentUser.uid);
        console.log('Provider bookings:', response);
      } else {
        response = await getUserBookings(currentUser.uid);
        console.log('Customer bookings:', response);
      }
      
      // Process bookings
      if (response && Array.isArray(response)) {
        // Sort by date (newest first)
        const sortedBookings = response.sort((a, b) => new Date(b.date) - new Date(a.date));
        
        // Fetch service details for each booking
        const bookingsWithDetails = await Promise.all(sortedBookings.map(async (booking) => {
          try {
            const serviceData = await getServiceById(booking.serviceId);
            // Store service details in state for quick access
            setServiceDetails(prev => ({
              ...prev,
              [booking.serviceId]: serviceData
            }));
            
            return {
              ...booking,
              serviceTitle: serviceData?.title || 'Unknown Service',
              serviceImage: serviceData?.image || defaultServiceImage,
              serviceCategory: serviceData?.category || 'General',
              formattedDate: format(new Date(booking.date), 'PPP'),
              formattedTime: booking.time
            };
          } catch (err) {
            console.error(`Error fetching service details for booking ${booking._id}:`, err);
            return {
              ...booking,
              serviceTitle: 'Service Details Unavailable',
              serviceImage: defaultServiceImage,
              serviceCategory: 'Unknown',
              formattedDate: format(new Date(booking.date), 'PPP'),
              formattedTime: booking.time
            };
          }
        }));
        
        setBookings(bookingsWithDetails);
      } else {
        setBookings([]);
      }
      
      setLoading(false);
    } catch (err) {
      console.error('Error fetching bookings:', err);
      setError('Failed to load bookings. Please try again later.');
      setLoading(false);
    }
  };
  
  // Handle booking cancellation
  const handleCancelBooking = async () => {
    if (!cancelBookingId) return;
    
    try {
      setProcessingAction(true);
      
      // Call API to update booking status
      await updateBookingStatus(cancelBookingId, 'cancelled');
      
      // Update local state
      setBookings(prevBookings => 
        prevBookings.map(booking => 
          booking._id === cancelBookingId 
            ? { ...booking, status: 'cancelled' } 
            : booking
        )
      );
      
      setShowCancelModal(false);
      setSuccess('Booking cancelled successfully.');
      setCancelBookingId(null);
      setProcessingAction(false);
    } catch (error) {
      console.error('Error cancelling booking:', error);
      setError('Failed to cancel booking. Please try again.');
      setProcessingAction(false);
    }
  };
  
  // Handle booking reschedule
  const handleRescheduleBooking = (bookingId) => {
    navigate(`/reschedule-booking/${bookingId}`);
  };
  
  // Handle viewing booking details
  const handleViewDetails = (booking) => {
    setSelectedBooking(booking);
    setShowDetailsModal(true);
  };
  
  // Handle status update (for providers)
  const handleStatusUpdate = async (bookingId, newStatus) => {
    try {
      setProcessingAction(true);
      
      // Call API to update booking status
      await updateBookingStatus(bookingId, newStatus);
      
      // Update local state
      setBookings(prevBookings => 
        prevBookings.map(booking => 
          booking._id === bookingId 
            ? { ...booking, status: newStatus } 
            : booking
        )
      );
      
      setSuccess(`Booking ${newStatus} successfully.`);
      setProcessingAction(false);
    } catch (error) {
      console.error(`Error updating booking to ${newStatus}:`, error);
      setError(`Failed to update booking status. Please try again.`);
      setProcessingAction(false);
    }
  };
  
  // Format date function
  const formatDate = (date) => {
    if (!date) return 'N/A';
    return new Date(date).toLocaleDateString('en-US', {
      weekday: 'short', year: 'numeric', month: 'short', day: 'numeric'
    });
  };
  
  // Status badge component with icons
  const StatusBadge = ({ status }) => {
    let bgColor, textColor, label, icon;
    
    switch (status) {
      case 'pending':
        bgColor = 'bg-yellow-100';
        textColor = 'text-yellow-800';
        label = 'Pending';
        icon = <FaClock className="mr-1" />;
        break;
      case 'confirmed':
        bgColor = 'bg-green-100';
        textColor = 'text-green-800';
        label = 'Confirmed';
        icon = <FaCheckCircle className="mr-1" />;
        break;
      case 'cancelled':
        bgColor = 'bg-red-100';
        textColor = 'text-red-800';
        label = 'Cancelled';
        icon = <FaBan className="mr-1" />;
        break;
      case 'completed':
        bgColor = 'bg-blue-100';
        textColor = 'text-blue-800';
        label = 'Completed';
        icon = <FaCheck className="mr-1" />;
        break;
      case 'rejected':
        bgColor = 'bg-gray-100';
        textColor = 'text-gray-800';
        label = 'Rejected';
        icon = <FaTimes className="mr-1" />;
        break;
      default:
        bgColor = 'bg-gray-100';
        textColor = 'text-gray-800';
        label = status || 'Unknown';
        icon = <FaExclamationTriangle className="mr-1" />;
    }
    
    return (
      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${bgColor} ${textColor}`}>
        {icon}
        {label}
      </span>
    );
  };
  
  // Filter bookings based on active tab
  const filteredBookings = bookings.filter((booking) => {
    const bookingDate = new Date(booking.date);
    const today = new Date();
    today.setHours(0, 0, 0, 0); // Set to beginning of day for accurate comparison

    if (activeTab === 'upcoming') {
      return (booking.status === 'pending' || booking.status === 'confirmed') && 
             (bookingDate >= today || booking.status === 'pending');
    } else if (activeTab === 'past') {
      return booking.status === 'completed' || 
             (booking.status === 'confirmed' && bookingDate < today);
    } else if (activeTab === 'cancelled') {
      return booking.status === 'cancelled' || booking.status === 'rejected';
    }
    return true;
  });
  
  // Calculate booking counts for tabs
  const bookingCounts = {
    upcoming: bookings.filter(b => 
      (b.status === 'pending' || b.status === 'confirmed') && 
      (new Date(b.date) >= new Date().setHours(0,0,0,0) || b.status === 'pending')
    ).length,
    past: bookings.filter(b => 
      b.status === 'completed' || 
      (b.status === 'confirmed' && new Date(b.date) < new Date().setHours(0,0,0,0))
    ).length,
    cancelled: bookings.filter(b => 
      b.status === 'cancelled' || b.status === 'rejected'
    ).length
  };
  
  // Loading state
  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex justify-center items-center">
        <motion.div 
          animate={{ rotate: 360 }}
          transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
          className="rounded-full h-12 w-12 border-t-2 border-b-2 border-primary-600"
        />
        <p className="ml-3 text-gray-600">Loading bookings...</p>
      </div>
    );
  }
  
  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Page Header */}
        <motion.div 
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="text-center mb-8"
        >
          <h1 className="text-3xl font-extrabold text-gray-900">
            {userRole === 'provider' ? 'Manage Service Bookings' : 'My Bookings'}
          </h1>
          <p className="mt-2 text-lg text-gray-600">
            {userRole === 'provider' 
              ? 'View and manage bookings for your services' 
              : 'Track and manage your service appointments'}
          </p>
        </motion.div>
        
        {/* Error Message */}
        {error && (
          <motion.div 
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            className="p-4 mb-6 rounded-md bg-red-50 border border-red-200"
          >
            <p className="font-medium flex items-center text-red-800">
              <FaExclamationTriangle className="mr-2" />
              {error}
            </p>
          </motion.div>
        )}
        
        {/* Success Message */}
        {success && (
          <motion.div 
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            className="p-4 mb-6 rounded-md bg-green-50 border border-green-200"
          >
            <p className="font-medium flex items-center text-green-800">
              <FaCheckCircle className="mr-2" />
              {success}
            </p>
          </motion.div>
        )}
        
        {/* Main Content */}
        <motion.div 
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.2 }}
          className="bg-white rounded-xl shadow-sm overflow-hidden mb-8"
        >
          {/* Tabs */}
          <div className="flex border-b border-gray-200">
            <button
              className={`flex-1 py-4 px-4 text-center font-medium flex items-center justify-center ${
                activeTab === 'upcoming'
                  ? 'text-primary-600 border-b-2 border-primary-600'
                  : 'text-gray-500 hover:text-gray-700'
              }`}
              onClick={() => setActiveTab('upcoming')}
            >
              <FaCalendarAlt className="mr-2" />
              Upcoming
              {bookingCounts.upcoming > 0 && (
                <span className="ml-2 px-2 py-0.5 text-xs rounded-full bg-primary-100 text-primary-800">
                  {bookingCounts.upcoming}
                </span>
              )}
            </button>
            
            <button
              className={`flex-1 py-4 px-4 text-center font-medium flex items-center justify-center ${
                activeTab === 'past'
                  ? 'text-primary-600 border-b-2 border-primary-600'
                  : 'text-gray-500 hover:text-gray-700'
              }`}
              onClick={() => setActiveTab('past')}
            >
              <FaCheck className="mr-2" />
              Past
              {bookingCounts.past > 0 && (
                <span className="ml-2 px-2 py-0.5 text-xs rounded-full bg-gray-100 text-gray-800">
                  {bookingCounts.past}
                </span>
              )}
            </button>
            
            <button
              className={`flex-1 py-4 px-4 text-center font-medium flex items-center justify-center ${
                activeTab === 'cancelled'
                  ? 'text-primary-600 border-b-2 border-primary-600'
                  : 'text-gray-500 hover:text-gray-700'
              }`}
              onClick={() => setActiveTab('cancelled')}
            >
              <FaBan className="mr-2" />
              Cancelled
              {bookingCounts.cancelled > 0 && (
                <span className="ml-2 px-2 py-0.5 text-xs rounded-full bg-red-100 text-red-800">
                  {bookingCounts.cancelled}
                </span>
              )}
            </button>
          </div>
          
          {/* Booking List */}
          <div className="p-6">
            {filteredBookings.length > 0 ? (
              <motion.div 
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ duration: 0.5 }}
                className="divide-y divide-gray-200"
              >
                {filteredBookings.map((booking) => (
                  <motion.div 
                    key={booking.id || booking._id} 
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.3 }}
                    className="bg-white rounded-lg shadow-sm p-6 mb-4 border border-gray-100 hover:shadow-md transition-shadow"
                  >
                    <div className="flex flex-col md:flex-row md:items-center md:justify-between">
                      <div className="flex items-center mb-4 md:mb-0">
                        <div className="h-20 w-20 flex-shrink-0 overflow-hidden rounded-md border border-gray-200">
                          <img
                            src={booking.serviceImage || defaultServiceImage}
                            alt={booking.serviceTitle}
                            className="h-full w-full object-cover object-center"
                            onError={(e) => {
                              e.target.src = defaultServiceImage;
                            }}
                          />
                        </div>
                        <div className="ml-4">
                          <h3 className="text-lg font-medium text-gray-900">{booking.serviceTitle}</h3>
                          <p className="mt-1 text-sm text-gray-500">{booking.serviceCategory}</p>
                          <div className="mt-2 flex items-center space-x-2">
                            <StatusBadge status={booking.status} />
                            <span className="text-sm font-medium text-primary-600">
                              ${booking.servicePrice || booking.price || 0}
                            </span>
                          </div>
                        </div>
                      </div>
                      
                      <div className="flex flex-col space-y-2">
                        <div className="flex items-center text-sm text-gray-500">
                          <FaCalendarAlt className="mr-2 text-gray-400" />
                          <span>{booking.formattedDate || formatDate(booking.date)}</span>
                        </div>
                        
                        <div className="flex items-center text-sm text-gray-500">
                          <FaClock className="mr-2 text-gray-400" />
                          <span>{booking.formattedTime || booking.time}</span>
                        </div>
                        
                        <div className="flex items-center text-sm text-gray-500">
                          <FaMapMarkerAlt className="mr-2 text-gray-400" />
                          <span>{booking.location || 'Location not specified'}</span>
                        </div>
                        
                        {userRole === 'customer' && (
                          <div className="flex items-center text-sm text-gray-500">
                            <FaUserAlt className="mr-2 text-gray-400" />
                            <span>Provider: {booking.providerName || 'Not specified'}</span>
                          </div>
                        )}
                        
                        {userRole === 'provider' && (
                          <div className="flex items-center text-sm text-gray-500">
                            <FaUserAlt className="mr-2 text-gray-400" />
                            <span>Customer: {booking.customerName || 'Not specified'}</span>
                          </div>
                        )}
                      </div>
                      
                      <div className="mt-4 md:mt-0 flex flex-col space-y-2">
                        <button
                          onClick={() => handleViewDetails(booking)}
                          className="inline-flex items-center justify-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
                        >
                          <FaEye className="mr-2" />
                          View Details
                        </button>
                        
                        {/* Customer Actions */}
                        {userRole === 'customer' && booking.status === 'pending' && (
                          <>
                            <button
                              onClick={() => handleRescheduleBooking(booking._id || booking.id)}
                              className="inline-flex items-center justify-center px-4 py-2 border border-primary-300 shadow-sm text-sm font-medium rounded-md text-primary-700 bg-primary-50 hover:bg-primary-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
                            >
                              <FaEdit className="mr-2" />
                              Reschedule
                            </button>
                            
                            <button
                              onClick={() => {
                                setCancelBookingId(booking._id || booking.id);
                                setShowCancelModal(true);
                              }}
                              className="inline-flex items-center justify-center px-4 py-2 border border-red-300 shadow-sm text-sm font-medium rounded-md text-red-700 bg-red-50 hover:bg-red-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
                            >
                              <FaBan className="mr-2" />
                              Cancel
                            </button>
                          </>
                        )}
                        
                        {/* Provider Actions */}
                        {userRole === 'provider' && booking.status === 'pending' && (
                          <div className="flex flex-col space-y-2">
                            <button
                              onClick={() => handleStatusUpdate(booking._id || booking.id, 'confirmed')}
                              className="inline-flex items-center justify-center px-4 py-2 border border-green-300 shadow-sm text-sm font-medium rounded-md text-green-700 bg-green-50 hover:bg-green-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
                            >
                              <FaCheck className="mr-2" />
                              Confirm
                            </button>
                            
                            <button
                              onClick={() => handleStatusUpdate(booking._id || booking.id, 'rejected')}
                              className="inline-flex items-center justify-center px-4 py-2 border border-red-300 shadow-sm text-sm font-medium rounded-md text-red-700 bg-red-50 hover:bg-red-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
                            >
                              <FaTimes className="mr-2" />
                              Reject
                            </button>
                          </div>
                        )}
                        
                        {userRole === 'provider' && booking.status === 'confirmed' && (
                          <button
                            onClick={() => handleStatusUpdate(booking._id || booking.id, 'completed')}
                            className="inline-flex items-center justify-center px-4 py-2 border border-blue-300 shadow-sm text-sm font-medium rounded-md text-blue-700 bg-blue-50 hover:bg-blue-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                          >
                            <FaCheckCircle className="mr-2" />
                            Mark as Completed
                          </button>
                        )}
                      </div>
                    </div>
                  </motion.div>
                ))}
              </motion.div>
            ) : (
              <div className="py-12 text-center">
                {activeTab === 'upcoming' ? (
                  <motion.div
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    className="flex flex-col items-center"
                  >
                    <FaCalendarAlt className="h-12 w-12 text-gray-400 mb-4" />
                    <h3 className="text-lg font-medium text-gray-900 mb-1">No upcoming bookings</h3>
                    <p className="text-gray-500 mb-6">You don't have any upcoming bookings at the moment.</p>
                    {userRole === 'customer' && (
                      <Link
                        to="/services"
                        className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
                      >
                        Browse Services
                      </Link>
                    )}
                  </motion.div>
                ) : activeTab === 'past' ? (
                  <motion.div
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    className="flex flex-col items-center"
                  >
                    <FaCheck className="h-12 w-12 text-gray-400 mb-4" />
                    <h3 className="text-lg font-medium text-gray-900 mb-1">No past bookings</h3>
                    <p className="text-gray-500">You don't have any completed bookings yet.</p>
                  </motion.div>
                ) : (
                  <motion.div
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    className="flex flex-col items-center"
                  >
                    <FaBan className="h-12 w-12 text-gray-400 mb-4" />
                    <h3 className="text-lg font-medium text-gray-900 mb-1">No cancelled bookings</h3>
                    <p className="text-gray-500">You don't have any cancelled bookings.</p>
                  </motion.div>
                )}
              </div>
            )}
          </div>
        </motion.div>
      </div>
      
      {/* Cancel Booking Confirmation Modal */}
      {showCancelModal && (
        <div className="fixed inset-0 overflow-y-auto z-50 flex items-center justify-center">
          <div className="fixed inset-0 bg-black bg-opacity-50 transition-opacity" onClick={() => setShowCancelModal(false)}></div>
          
          <motion.div 
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.9 }}
            className="bg-white rounded-lg max-w-md w-full mx-auto z-10 p-6 relative"
          >
            <div className="sm:flex sm:items-start">
              <div className="mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10">
                <FaExclamationTriangle className="h-6 w-6 text-red-600" />
              </div>
              <div className="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left">
                <h3 className="text-lg leading-6 font-medium text-gray-900">Cancel Booking</h3>
                <div className="mt-2">
                  <p className="text-sm text-gray-500">
                    Are you sure you want to cancel this booking? This action cannot be undone.
                  </p>
                </div>
              </div>
            </div>
            
            <div className="mt-5 sm:mt-4 sm:flex sm:flex-row-reverse">
              <button
                type="button"
                className="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 sm:ml-3 sm:w-auto sm:text-sm"
                onClick={handleCancelBooking}
                disabled={processingAction}
              >
                {processingAction ? (
                  <span className="flex items-center">
                    <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" />
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" />
                    </svg>
                    Processing...
                  </span>
                ) : (
                  'Yes, Cancel'
                )}
              </button>
              <button
                type="button"
                className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 sm:mt-0 sm:w-auto sm:text-sm"
                onClick={() => setShowCancelModal(false)}
              >
                No, Keep It
              </button>
            </div>
          </motion.div>
        </div>
      )}
      
      {/* Booking Details Modal */}
      {showDetailsModal && selectedBooking && (
        <div className="fixed inset-0 overflow-y-auto z-50 flex items-center justify-center">
          <div className="fixed inset-0 bg-black bg-opacity-50 transition-opacity" onClick={() => setShowDetailsModal(false)}></div>
          
          <motion.div 
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: 20 }}
            className="bg-white rounded-lg max-w-2xl w-full mx-auto z-10 relative overflow-hidden"
          >
            <div className="bg-primary-600 p-6 text-white">
              <h3 className="text-xl font-bold">{selectedBooking.serviceTitle}</h3>
              <p className="text-primary-100">{selectedBooking.serviceCategory}</p>
            </div>
            
            <div className="p-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <h4 className="text-sm font-medium text-gray-500 mb-1">Booking Status</h4>
                  <StatusBadge status={selectedBooking.status} />
                </div>
                
                <div>
                  <h4 className="text-sm font-medium text-gray-500 mb-1">Booking ID</h4>
                  <p className="text-gray-900">{selectedBooking._id || selectedBooking.id}</p>
                </div>
                
                <div>
                  <h4 className="text-sm font-medium text-gray-500 mb-1">Date</h4>
                  <p className="text-gray-900 flex items-center">
                    <FaCalendarAlt className="mr-2 text-gray-400" />
                    {selectedBooking.formattedDate || formatDate(selectedBooking.date)}
                  </p>
                </div>
                
                <div>
                  <h4 className="text-sm font-medium text-gray-500 mb-1">Time</h4>
                  <p className="text-gray-900 flex items-center">
                    <FaClock className="mr-2 text-gray-400" />
                    {selectedBooking.formattedTime || selectedBooking.time}
                  </p>
                </div>
                
                <div>
                  <h4 className="text-sm font-medium text-gray-500 mb-1">Location</h4>
                  <p className="text-gray-900 flex items-center">
                    <FaMapMarkerAlt className="mr-2 text-gray-400" />
                    {selectedBooking.location || 'Not specified'}
                  </p>
                </div>
                
                <div>
                  <h4 className="text-sm font-medium text-gray-500 mb-1">Price</h4>
                  <p className="text-gray-900 font-medium">
                    ${selectedBooking.servicePrice || selectedBooking.price || 0}
                  </p>
                </div>
                
                {userRole === 'customer' && (
                  <div>
                    <h4 className="text-sm font-medium text-gray-500 mb-1">Service Provider</h4>
                    <p className="text-gray-900 flex items-center">
                      <FaUserAlt className="mr-2 text-gray-400" />
                      {selectedBooking.providerName || 'Not specified'}
                    </p>
                  </div>
                )}
                
                {userRole === 'provider' && (
                  <div>
                    <h4 className="text-sm font-medium text-gray-500 mb-1">Customer</h4>
                    <p className="text-gray-900 flex items-center">
                      <FaUserAlt className="mr-2 text-gray-400" />
                      {selectedBooking.customerName || 'Not specified'}
                    </p>
                  </div>
                )}
                
                {selectedBooking.notes && (
                  <div className="col-span-2">
                    <h4 className="text-sm font-medium text-gray-500 mb-1">Notes</h4>
                    <p className="text-gray-900 bg-gray-50 p-3 rounded-md">{selectedBooking.notes}</p>
                  </div>
                )}
              </div>
              
              <div className="mt-6 flex flex-wrap gap-2 justify-end">
                <button
                  onClick={() => setShowDetailsModal(false)}
                  className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
                >
                  Close
                </button>
                
                {/* Provider Actions */}
                {userRole === 'provider' && selectedBooking.status === 'pending' && (
                  <button
                    onClick={() => handleStatusUpdate(selectedBooking._id || selectedBooking.id, 'confirmed')}
                    className="px-4 py-2 text-sm font-medium text-white bg-green-600 border border-transparent rounded-md hover:bg-green-700"
                    disabled={processingAction}
                  >
                    {processingAction ? 'Processing...' : 'Confirm Booking'}
                  </button>
                )}
                
                {userRole === 'provider' && selectedBooking.status === 'confirmed' && (
                  <button
                    onClick={() => handleStatusUpdate(selectedBooking._id || selectedBooking.id, 'completed')}
                    className="px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700"
                    disabled={processingAction}
                  >
                    {processingAction ? 'Processing...' : 'Mark as Completed'}
                  </button>
                )}
                
                {/* Customer Actions */}
                {userRole === 'customer' && (selectedBooking.status === 'pending' || selectedBooking.status === 'confirmed') && (
                  <>
                    <button
                      onClick={() => handleRescheduleBooking(selectedBooking._id || selectedBooking.id)}
                      className="px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700"
                      disabled={processingAction}
                    >
                      Reschedule
                    </button>
                    <button
                      onClick={() => {
                        setCancelBookingId(selectedBooking._id || selectedBooking.id);
                        setShowDetailsModal(false);
                        setShowCancelModal(true);
                      }}
                      className="px-4 py-2 text-sm font-medium text-white bg-red-600 border border-transparent rounded-md hover:bg-red-700"
                      disabled={processingAction}
                    >
                      Cancel
                    </button>
                  </>
                )}
              </div>
            </div>
          </motion.div>
        </div>
      )}
    </div>
  );
};

export default MyBookings;
